#+HUGO_BASE_DIR: ./
#+HUGO_SECTION: solutions

* Project Euler
** Problem 1: Multiples of 3 and 5
   :PROPERTIES:
   :header-args: :tangle src/solutions/p001.rs
   :EXPORT_FILE_NAME: p001
   :END:

Sequence summation for numbers up to a given _N_.

#+hugo: more

*** Description
#+begin_quote
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get
3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
#+end_quote

*** Iterative solution
#+begin_src rust
solve!(p001, iterative, 1_000, |n| -> i128 {
    (3..n).filter(|m| m % 3 == 0 || m % 5 == 0).sum()
});
#+end_src

*** Closed form solution
#+begin_src rust
fn sum_to(n: u128) -> u128 {
    (n * (n + 1)) / 2
}

solve!(p001, closed, 1_000, |n| -> i128 {
    let sum_multiples = |x| x * sum_to((n as u128 - 1) / x);

    let multiples = &[3, 5].iter().map(sum_multiples).sum();
    let product_multiples = sum_multiples(&[3, 5].iter().product());

    (multiples - product_multiples) as i128
});
#+end_src

*** Benchmarks
#+name: p001_benchmark
#+begin_src rust :tangle no
bench!(p001, "p001", Logarithmic,
       100 500 1_000 5_000 10_000,
       iterative -> "iterative"
       closed -> "closed form"
);
#+end_src

[[/images/p001_comparison.svg]]

* Appendix A: Benchmark files
#+begin_src rust :noweb yes :tangle benches/benchmark.rs
use criterion::{criterion_group, criterion_main};
use criterion::{AxisScale, BenchmarkId, Criterion, PlotConfiguration};

criterion_main!(benches);
criterion_group! {
    name = benches;
    config = Criterion::default().noise_threshold(0.1);
    targets = benchmark
}

fn benchmark(c: &mut Criterion) {
    macro_rules! bench {
        ( $problem_id:ident, $group:expr, $axis_scale:ident, $( $inputs:expr )*, $( $method:ident -> $method_description:expr )* ) => {
            let mut $problem_id = c.benchmark_group($group);

            let plot_config = PlotConfiguration::default().summary_scale(AxisScale::$axis_scale);
            $problem_id.plot_config(plot_config);

            for size in [ $( $inputs, )* ].iter() {
                $(
                    $problem_id.bench_with_input(
                        BenchmarkId::new($method_description, size),
                        size,
                        |b, i| b.iter(|| euler_solutions::solutions::$problem_id::$method(*i))
                    );
                )*
            }

            $problem_id.finish();
        };
    }

    <<benchmark_entries>>
}
#+end_src

#+name: benchmark_entries
#+begin_src rust :noweb yes
<<p001_benchmark>>
#+end_src

* Footnotes
* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
