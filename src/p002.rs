//! Problem 2: Even Fibonacci numbers
//!
//! Each new term in the Fibonacci sequence is generated by adding the previous
//! two terms. By starting with 1 and 2, the first 10 terms will be:
//!
//! 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//!
//! By considering the terms in the Fibonacci sequence whose values do not
//! exceed four million, find the sum of the even-valued terms.

pub fn sum_of_even_value_fibs(limit: u32) -> u32 {
    FibIter::new()
        .take_while(|&n| n < limit)
        .filter(|n| n % 2 == 0)
        .sum()
}

pub struct FibIter(u32, u32);

impl FibIter {
    pub fn new() -> Self {
        Self(1, 2)
    }
}

impl Iterator for FibIter {
    type Item = u32;

    fn next(&mut self) -> Option<Self::Item> {
        let curr = self.0;
        self.0 = self.1;
        self.1 = self.1 + curr;

        Some(curr)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn sum_of_even_value_fibonacci_numbers_are_calculated() {
        assert_eq!(sum_of_even_value_fibs(10), 10);
    }

    #[test]
    fn fibonacci_numbers_are_generated() {
        let mut fibs = FibIter::new();

        assert_eq!(fibs.next(), Some(1));
        assert_eq!(fibs.next(), Some(2));
        assert_eq!(fibs.next(), Some(3));
        assert_eq!(fibs.next(), Some(5));
        assert_eq!(fibs.next(), Some(8));
        assert_eq!(fibs.next(), Some(13));
    }

    #[test]
    fn p002() {
        assert_eq!(sum_of_even_value_fibs(4_000_000), 4_613_732);
    }
}
